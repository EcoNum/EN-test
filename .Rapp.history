prettyPrint(names(Iris))
names(Iris) <- c("Sepal_length__mm", "Sepal_width__mm", "Petal_length__mm",#
    "Petal_width__mm", "Species")#
names(Iris)
Iris
setnames
?setnames
trunc_mat
dplyr:::print.trunc_mat
names(Iris) <- c("Sepal_length__cm", "Sepal_width__cm", "Petal_length__cm",#
    "Petal_width__cm", "Species")
Iris
Iris$Species
iris$Species
iris[["Species"]]
iris$.("Species")
?list
?numeric
numeric()
numeric(2)
numeric(1:2)
numeric(numeric(0))
numeric("2")
?c
ll <- list(A = 1, c = "C")#
## do *not* use#
c(ll, d = 1:3) # which is == c(ll, as.list(c(d = 1:3))#
## but rather#
c(ll, d = list(1:3))  # c() combining two lists
unlist(ll)
?c
c(list(A = c(B = 1)), recursive = TRUE)
list(A = c(B = 1)
)
c(list(A = c(B = 1)), recursive = FALSE)
list(A = c(B = 1, D = 2)
)
c(list(A = c(B = 1, D = 2)), recursive = FALSE)
c(list(A = c(B = 1, D = 2)), recursive = TRUE)
c(options(), recursive = TRUE)#
c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
unlist(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
unlist(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = FALSE)
c
unlist(options())
list
`length<-`
length(1:3) <- 2
x <- 1:3
length(x) <- 2
x
length(x) <- 5
x
length(iris)
?list
numeric
num <- function (...)#
    as.numeric(c(...))
num()
numeric()
num(1)
num(1:3)
num(1:3, 5, 7)
args(vector)
num(a = "1", b = 6.7, c = "r")
?as.vector
num <- function (...)#
{#
    res <- c(...)#
    res[] <- as.numeric(res) # To preserve attributes like names#
    res#
}
num(a = "1", b = 6.7, c = "r")
?vector
?c
num <- function (...)#
{#
    vec <- c(...)#
    res <- as.numeric(vec)#
    names(res) <- names(vec)#
    res#
}
num(a = "1", b = 6.7, c = "r")
args(unlist)
unlist(1, 2, c = 3)
unlist(c(1, 2, c = 3))
class(unlist(c(1, 2, c = 3)))
?comment
Iris
comment(Iris)
comment(Iris) <- "Anderson's famous iris data set"
Iris
comment(Iris)
ll <- list(a = 1, b = list(c = 2, d = 3))
ll
ll <- list(a = 1, b = list(c = 2, d = 3:4))
ll
c(ll)
c(ll, recursive = TRUE)
unlist(ll, recursive = TRUE)
unlist(ll, recursive = FALSE)
unlist(matrix(1:12, nrow = 3), recursive = TRUE)
c(matrix(1:12, nrow = 3), recursive = TRUE)
c(as.data.frame(matrix(1:12, nrow = 3)), recursive = TRUE)
(as.data.frame(matrix(1:12, nrow = 3))
)
num <- function (...)#
{#
    vec <- c(..., recursive = TRUE)#
    res <- as.numeric(vec)#
    names(res) <- names(vec)#
    res#
}#
num() # = numeric()#
num(1:3, 5, 6)#
num(a = 1, b = "2", c = "abc") # Keep names
num(1, list(b= 2, c = list(d = 3, e = 4:5)))
is.numeric
isNum <- is.numeric#
isNum(1)#
isNum(1L)
isNum
as.numeric
asNum <- as.numeric # This would cause problems in a CRAN package!#
asNum("2")
asNum(a = "2")
asNum(c(a = "2"))
as
as("2", "numeric")
class(as("2", "numeric"))
?as
attributes(as("2", "numeric"))
cumprod(1:3)
prod(1:3)
?prod
dim(1) <- c(2, 3, 4)
x <- 1
dim(x) <- c(2, 3, 4)
dim(x) <- 1
attributes(x)
?rep
zeros <- function (dim = 1, class = "numeric")#
{#
    if (length(dim) == 1) {#
        as(rep_len(0, dim), class)#
    } else {#
        res <- as(rep_len(0, prod(dim)), class)#
        dim(res) <- dim#
        res#
    }#
}#
zeros()#
zeros(5)#
zeros(c(5, 5), "character")
zeros <- function (dim = 0, class = "numeric")#
{#
    if (length(dim) == 1) {#
        as(rep_len(0, dim), class)#
    } else {#
        res <- as(rep_len(0, prod(dim)), class)#
        dim(res) <- dim#
        res#
    }#
}#
zeros()#
zeros(5)#
zeros(c(5, 5), "character")
rep_len(1:3, 5)
rep_len(1:3, 2)
prod(NULL)
library(knitr)
library(help = knitr)
?kable
apropos("fig")
?as.roman
as.roman(1:10)
?match.type
?match
figs <- c(testfig1 = 1, testfig2 = 2)
figs$testfig1
figs[['testfig1']]
figs[['testfig3']]
ll <- list(a = 1, b = 2)
ll$a
ll$c
ll[["c"]]
ll[["a"]]
newFig <- function (num.type = c("arabic", "roman"), prefix = "")#
{#
    num.type <- match.arg(num.type)#
    num.conv <- switch(num.type,#
        arabic = function (x) x,#
        roman = function (x) utils::as.roman(x))#
    prefix <- as.character(prefix[1])#
    figs <- list()#
    ## Return a function that creates the enumeration of the items#
    function (label, reset = FALSE) {#
        ## Do we reset figs?#
        if (isTRUE(reset)) figs <<- list()#
        value <- figs[[label]]#
        ## Does it exists?#
        if (is.null(value)) {#
            value <- paste0(prefix, num.conv(length(figs) + 1))#
            ## Record this item in figs#
            figs[[label]] <- value#
            figs <<- figs#
        }#
        value#
    }#
}#
#
fig <- newFig(prefix = "1.")#
fig("fig1")#
fig("fig2")#
fig("fig1")
fig <- newFig(num.type = "roman", prefix = "1.")#
fig("fig1")#
fig("fig2")#
fig("fig1")
apropos("tab")
newLabelling <- function (num.type = c("arabic", "roman"), prefix = "")#
{#
    num.type <- match.arg(num.type)#
    num.conv <- switch(num.type,#
        arabic = function (x) x,#
        roman = function (x) utils::as.roman(x))#
    prefix <- as.character(prefix[1])#
    figs <- list()#
    ## Return a function that creates the enumeration of the items#
    function (label, reset = FALSE) {#
        ## Do we reset figs?#
        if (isTRUE(reset)) figs <<- list()#
        ## Do we have a label? If not, return an empty string.#
        if (missing(label)) return(invisible(""))#
        label <- deparse(substitute(label))#
        value <- figs[[label]]#
        ## Does it exists?#
        if (is.null(value)) {#
            value <- paste0(prefix, num.conv(length(figs) + 1))#
            ## Record this item in figs#
            figs[[label]] <- value#
            figs <<- figs#
        }#
        value#
    }#
}#
#
fig <- newLabelling(num.type = "roman", prefix = "1.")#
fig("fig1")#
fig("fig2")#
fig("fig1")#
#
fig(my_figure1)
fig("my_figure1")
fig(my_figure1)
newLabelling <- function (num.type = c("arabic", "roman"), prefix = "")#
{#
    num.type <- match.arg(num.type)#
    num.conv <- switch(num.type,#
        arabic = function (x) x,#
        roman = function (x) utils::as.roman(x))#
    prefix <- as.character(prefix[1])#
    figs <- list()#
    ## Return a function that creates the enumeration of the items#
    function (label, reset = FALSE) {#
        ## Do we reset figs?#
        if (isTRUE(reset)) figs <<- list()#
        ## Do we have a label? If not, return an empty string.#
        if (missing(label)) return(invisible(""))#
        value <- figs[[label]]#
        ## Does it exists?#
        if (is.null(value)) {#
            value <- paste0(prefix, num.conv(length(figs) + 1))#
            ## Record this item in figs#
            figs[[label]] <- value#
            figs <<- figs#
        }#
        value#
    }#
}#
#
fig <- newLabelling(num.type = "roman", prefix = "1.")#
fig("fig1")#
fig("fig2")#
fig("fig1")
newLabelling <- function (type = c("arabic", "roman"), prefix = "")#
{#
    type <- match.arg(type)#
    conv <- switch(type,#
        arabic = function (x) x,#
        roman = function (x) utils::as.roman(x))#
    prefix <- as.character(prefix[1])#
    labels <- list()#
    ## Return a function that creates the enumeration of the items#
    function (label, reset = FALSE) {#
        ## Do we reset figs?#
        if (isTRUE(reset)) labels <<- list()#
        ## Do we have a label? If not, return an empty string.#
        if (missing(label)) return(invisible(""))#
        value <- labels[[label]]#
        ## Does it exists?#
        if (is.null(value)) {#
            value <- paste0(prefix, conv(length(labels) + 1))#
            ## Record this item in labels#
            labels[[label]] <- value#
            labels <<- labels#
        }#
        value#
    }#
}#
#
## Default items#
fig <- newLabelling()#
tab <- newLabelling()#
eq <- newLabelling()
fig()
fig("a")
fig("b")
fig("c")
fig("b")
library(svSweave)
fig()
fig("a")
fig("b")
fig("a")
fig("b", reset = TRUE)
fig("a")
library(knitr)
args(kable)
kable
?kable
rep_len(1:3, 2)
library(svSweave)
example(fig)
apropos("str")
grepl("$$$$", "some text $$$$ here")
grepl("$$$$", "some text $$$ here")
grepl("%%%%", "some text %%%% here")
grepl("%%%%", "some text %%% here")
grepl("@@@@", "some text @@@@ here")
grepl("@@@@", "some text @@@ here")
grepl("####", "some text #### here")
grepl("####", "some text ### here")
apropos("names)")
apropos("names")
?variable.names
?make.names
make.names("This is a string #")
gsub("\\.", "-", make.names("This is a string #"))
?make.names
library("covr")
setwd("~/Documents/Pgm/Github/EcoNum/EN-test")
cov <- package_coverage()
setwd("~/Documents/Pgm/Github/EcoNum")
cov <- package_coverage()
setwd("~/Documents/Pgm/Github/EcoNum/EN-test")
cov <- package_coverage()
?package_coverage
setwd("/Library/Frameworks/R.framework/Versions/3.2/Resources/EN-test")
setwd("/Library/Frameworks/R.framework/Versions/3.2/Resources")
dir()
setwd("/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
dir()
setwd("/Library/Frameworks/R.framework/Versions/3.2/Resources/library/ENtest")
cov <- package_coverage()
package_coverage
run_tests
covr:::run_tests
cov <- package_coverage(type = "all")
setwd("~/Documents/Pgm/Github/EcoNum/EN-test")
cov <- package_coverage(type = "all")
cov <- package_coverage(type = "all")
coveralls()
args(package_coverage)
?package_coverage
package_coverage
covr:::run_tests
covr:::test_directory
library(RUnit)
install.packages("RUnit")
library(RUnit)
library(help = RUnit)
?RUnit
covr:::test_directory <- function (path) #
{#
    if (file.exists(file.path(path, "tests"))) {#
        file.path(path, "tests")#
    }#
    else if (file.exists(file.path(path, "inst", "tests"))) {#
        file.path(path, "inst", "tests")#
    }#
    else if (file.exists(file.path(path, "unitTests"))) {#
        file.path(path, "unitTests")#
    }#
    else if (file.exists(file.path(path, "inst", "unitTests"))) {#
        file.path(path, "inst", "unitTests")#
    }#
    else {#
        stop("No testing directory found", call. = FALSE)#
    }#
}
test_directory <- function (path) #
{#
    if (file.exists(file.path(path, "tests"))) {#
        file.path(path, "tests")#
    }#
    else if (file.exists(file.path(path, "inst", "tests"))) {#
        file.path(path, "inst", "tests")#
    }#
    else if (file.exists(file.path(path, "unitTests"))) {#
        file.path(path, "unitTests")#
    }#
    else if (file.exists(file.path(path, "inst", "unitTests"))) {#
        file.path(path, "inst", "unitTests")#
    }#
    else {#
        stop("No testing directory found", call. = FALSE)#
    }#
}
covr:::run_tests()
cov <- package_coverage(type = "all")
library(svUnit)
(checkException(1+1, "'1+1' raises an exception"))
?coverall
?codecov
?coveralls
apropos("check")
checkEqualsNumeric(1, 2/2)
(checkEqualsNumeric(1, 2/2))
(checkEqualsNumeric(1, 2/3))
(1:3)^3
(svUnit::checkEqualsNumeric(1, 2/2, "cube(1:3 must return 1, 8, 27)"))
cube <- function (x)#
{#
    if (!is.numeric(x))#
        stop("'x' must be numeric")#
    x^3#
}
cube(1:3)
(checkEqualsNumeric(c(1, 8, 27), cube(1:3), "cube(1:3 must return 1, 8, 27)"))
cube(2)
cube(0)
cube(-1)
cube(-2)
cube(NA)
cube(NaN)
is.nan(cube(NaN))
(checkTrue(is.nan(cube(NaN)), "cube(NaN) must return NaN"))
options()$repos
options(repos = c(CRAN=\"http://cran.r-project.org\"))
options(repos = c(CRAN = "http://cran.r-project.org"))
options()$repos
library(PhGcode)
?cube
cube(1L)
?PhGcode
library(pastecs)
install.packages("pastecs")
library(pastecs)
abund(1:10)
unclass(abund(1:10))
abund(1:10)$data
(checkEquals("1:10", abund(1:10)$data))
(checkEquals("1:100", abund(1:10)$data))
abund("a")
